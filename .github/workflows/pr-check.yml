name: PR Quick Check

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

# PR 머지 전 필수 검사 항목들
jobs:
  # 빠른 코드 품질 검사
  quick-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 필요 (차이점 분석용)

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            src/**/*.{ts,tsx,js,jsx}
            *.{ts,tsx,js,jsx}

      - name: Run ESLint on changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          pnpm exec eslint ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Run TypeScript check
        run: pnpm run type-check

      - name: Run Prettier check on changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          pnpm exec prettier --check ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Check for console.log statements
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          if grep -r "console\.log" ${{ steps.changed-files.outputs.all_changed_files }}; then
            echo "❌ console.log statements found in changed files"
            echo "Please remove console.log statements before merging"
            exit 1
          else
            echo "✅ No console.log statements found"
          fi

  # 빠른 테스트 (변경된 부분만)
  quick-test:
    runs-on: ubuntu-latest
    needs: quick-check

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: household_ledger_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/household_ledger_test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret-key-for-ci" >> $GITHUB_ENV
          echo "JWT_REFRESH_SECRET=test-refresh-secret-key-for-ci" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-nextauth-secret" >> $GITHUB_ENV

      - name: Generate Prisma client
        run: pnpm exec prisma generate

      - name: Run database migrations
        run: pnpm exec prisma db push

      - name: Run unit tests (no coverage for speed)
        run: pnpm run test -- --passWithNoTests

  # 빌드 테스트
  build-check:
    runs-on: ubuntu-latest
    needs: quick-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm exec prisma generate

      - name: Build application
        run: pnpm run build

  # PR 상태 요약
  pr-status:
    runs-on: ubuntu-latest
    needs: [quick-check, quick-test, build-check]
    if: always()

    steps:
      - name: Check PR status
        run: |
          echo "PR Status Summary:"
          echo "==================="
          echo "Quick Check: ${{ needs.quick-check.result }}"
          echo "Quick Test: ${{ needs.quick-test.result }}"
          echo "Build Check: ${{ needs.build-check.result }}"
          echo ""
          
          if [[ "${{ needs.quick-check.result }}" == "success" && 
                "${{ needs.quick-test.result }}" == "success" && 
                "${{ needs.build-check.result }}" == "success" ]]; then
            echo "✅ All PR checks passed! Ready to merge."
            exit 0
          else
            echo "❌ Some PR checks failed. Please fix issues before merging."
            exit 1
          fi

      - name: Comment PR status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { needs } = context.payload;
            const checkResults = {
              'quick-check': '${{ needs.quick-check.result }}',
              'quick-test': '${{ needs.quick-test.result }}',
              'build-check': '${{ needs.build-check.result }}'
            };
            
            const allPassed = Object.values(checkResults).every(result => result === 'success');
            const emoji = allPassed ? '✅' : '❌';
            const status = allPassed ? 'All checks passed!' : 'Some checks failed';
            
            const body = `
            ## ${emoji} PR Quick Check Results
            
            ${status}
            
            | Check | Status |
            |-------|--------|
            | Code Quality | ${checkResults['quick-check'] === 'success' ? '✅' : '❌'} |
            | Unit Tests | ${checkResults['quick-test'] === 'success' ? '✅' : '❌'} |
            | Build | ${checkResults['build-check'] === 'success' ? '✅' : '❌'} |
            
            ${!allPassed ? '⚠️ Please fix the failing checks before merging this PR.' : '🎉 This PR is ready to merge!'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
