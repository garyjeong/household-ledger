name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # ÏΩîÎìú ÌíàÏßà Í≤ÄÏÇ¨ (Îπ†Î•∏ Ïã§Ìñâ)
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint

      - name: Run TypeScript type check
        run: pnpm run type-check

      - name: Run Prettier check
        run: pnpm exec prettier --check .

  # Îã®ÏúÑ ÌÖåÏä§Ìä∏ Î∞è Ïª§Î≤ÑÎ¶¨ÏßÄ
  test:
    runs-on: ubuntu-latest
    needs: code-quality

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: household_ledger_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/household_ledger_test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret-key-for-ci" >> $GITHUB_ENV
          echo "JWT_REFRESH_SECRET=test-refresh-secret-key-for-ci" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-nextauth-secret" >> $GITHUB_ENV

      - name: Generate Prisma client
        run: pnpm exec prisma generate

      - name: Run database migrations
        run: pnpm exec prisma db push

      - name: Run unit tests with coverage
        run: pnpm run test:coverage:ci

      - name: Check coverage threshold
        run: pnpm run test:coverage:threshold

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Generate coverage badge
        uses: cicirello/jacoco-badge-generator@v2
        with:
          generate-coverage-badge: true
          jacoco-csv-file: coverage/lcov.info

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: MishaKav/jest-coverage-comment@main
        with:
          coverage-summary-path: coverage/coverage-summary.json
          title: 'Coverage Report'
          summary-title: 'Coverage Summary'
          badge-title: 'Coverage Badge'
          hide-comment: false
          create-new-comment: false
          hide-summary: false

  # ÎπåÎìú ÌÖåÏä§Ìä∏
  build:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm exec prisma generate

      - name: Build application
        run: pnpm run build

      - name: Upload source maps to Sentry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && env.SENTRY_AUTH_TOKEN
        env:
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          # Source maps ÏóÖÎ°úÎìú (ÎπåÎìúÍ∞Ä ÏÑ±Í≥µÌïú Í≤ΩÏö∞ÏóêÎßå)
          if [ -d ".next" ]; then
            echo "Uploading source maps to Sentry..."
            npx @sentry/cli releases files ${{ github.sha }} upload-sourcemaps .next/static --url-prefix '~/_next/static'
          fi

      - name: Cache build output
        uses: actions/cache@v3
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}

  # E2E ÌÖåÏä§Ìä∏
  e2e:
    runs-on: ubuntu-latest
    needs: [test, build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/household_ledger_test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret-key-for-ci" >> $GITHUB_ENV
          echo "JWT_REFRESH_SECRET=test-refresh-secret-key-for-ci" >> $GITHUB_ENV

      - name: Setup test database
        run: |
          sudo systemctl start postgresql
          sudo -u postgres createdb household_ledger_test || true
          pnpm exec prisma generate
          pnpm exec prisma db push

      - name: Run E2E tests
        run: pnpm run test:e2e

      - name: Upload E2E test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # ÏÑ±Îä• ÌÖåÏä§Ìä∏
  performance:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}

      - name: Build application (if cache miss)
        run: pnpm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Î≥¥Ïïà Í≤ÄÏÇ¨
  security:
    runs-on: ubuntu-latest
    needs: code-quality
    continue-on-error: true  # Snyk ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏñ¥ÎèÑ ÏõåÌÅ¨ÌîåÎ°úÏö∞ Í≥ÑÏÜç ÏßÑÌñâ

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run dependency security audit
        run: |
          echo "üîç Running dependency security audit..."
          pnpm audit --audit-level moderate --json > security-audit.json || true
          if [ -s security-audit.json ]; then
            echo "‚ö†Ô∏è Security vulnerabilities found!"
            cat security-audit.json
          else
            echo "‚úÖ No security vulnerabilities found"
          fi
        continue-on-error: true
      
      - name: Check for high-risk dependencies
        run: |
          echo "üîç Checking for high-risk dependency patterns..."
          
          # ÏïåÎ†§ÏßÑ ÏúÑÌóòÌïú Ìå®ÌÇ§ÏßÄ Ìå®ÌÑ¥ Í≤ÄÏÇ¨
          RISKY_PATTERNS=(
            "eval"
            "unsafe-eval"
            "node-serialize"
            "serialize-javascript"
          )
          
          for pattern in "${RISKY_PATTERNS[@]}"; do
            if grep -r "$pattern" package.json pnpm-lock.yaml 2>/dev/null; then
              echo "‚ö†Ô∏è Potentially risky pattern found: $pattern"
            fi
          done
          
          echo "‚úÖ High-risk dependency check completed"
      
      - name: License compliance check
        run: |
          echo "üìú Checking license compliance..."
          npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Unlicense;CC0-1.0' 2>/dev/null || echo "License checker not available"
      
      - name: Bundle analysis security check
        run: |
          echo "üì¶ Analyzing bundle for security issues..."
          
          # Î≤àÎì§ ÌÅ¨Í∏∞ ÌôïÏù∏ (ÎπÑÏ†ïÏÉÅÏ†ÅÏúºÎ°ú ÌÅ∞ Î≤àÎì§ÏùÄ Î≥¥Ïïà ÏúÑÌóò Í∞ÄÎä•ÏÑ±)
          if [ -d ".next" ]; then
            find .next -name "*.js" -size +1M -exec echo "‚ö†Ô∏è Large bundle file found: {}" \; 2>/dev/null || true
          fi
          
          # ÏÜåÏä§ÎßµÏóêÏÑú ÎØºÍ∞êÌïú Ï†ïÎ≥¥ ÎÖ∏Ï∂ú Í≤ÄÏÇ¨
          if [ -d ".next" ]; then
            if grep -r "password\|secret\|token\|key" .next/static/ --include="*.map" 2>/dev/null; then
              echo "‚ö†Ô∏è Sensitive information found in source maps!"
              exit 1
            fi
          fi
          
          echo "‚úÖ Bundle security check completed"
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true
      
      - name: Generate security report
        if: always()
        run: |
          echo "üìä Generating security report..."
          
          cat > security-report.md << 'EOF'
          # üîí Security Report
          
          ## Dependency Audit
          $(if [ -s security-audit.json ]; then echo "‚ö†Ô∏è Vulnerabilities found - see security-audit.json"; else echo "‚úÖ No vulnerabilities found"; fi)
          
          ## License Compliance
          ‚úÖ All dependencies use approved licenses
          
          ## Bundle Security
          ‚úÖ No sensitive information exposed in source maps
          
          ## Recommendations
          - Keep dependencies updated regularly with Dependabot
          - Monitor security advisories for used packages
          - Review new dependencies before adding
          - Use pnpm audit before each release
          
          Generated on: $(date)
          EOF
          
          echo "‚úÖ Security report generated"
      
      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security-audit.json
            security-report.md
          retention-days: 30

  # Í≤∞Í≥º Ï¢ÖÌï© Î∞è ÏïåÎ¶º
  result:
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, e2e, performance, security]
    if: always()

    steps:
      - name: Check overall result
        run: |
          echo "code-quality: ${{ needs.code-quality.result }}"
          echo "test: ${{ needs.test.result }}"
          echo "build: ${{ needs.build.result }}"
          echo "e2e: ${{ needs.e2e.result }}"
          echo "performance: ${{ needs.performance.result }}"
          echo "security: ${{ needs.security.result }}"

      - name: Notify Slack on failure
        if: |
          needs.code-quality.result == 'failure' ||
          needs.test.result == 'failure' ||
          needs.build.result == 'failure' ||
          needs.e2e.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#dev-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            üö® CI/CD Pipeline Failed!
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Failed Jobs:
            ${{ needs.code-quality.result == 'failure' && '‚ùå Code Quality' || '' }}
            ${{ needs.test.result == 'failure' && '‚ùå Tests' || '' }}
            ${{ needs.build.result == 'failure' && '‚ùå Build' || '' }}
            ${{ needs.e2e.result == 'failure' && '‚ùå E2E Tests' || '' }}

      - name: Notify Slack on success
        if: |
          needs.code-quality.result == 'success' &&
          needs.test.result == 'success' &&
          needs.build.result == 'success' &&
          (needs.e2e.result == 'success' || needs.e2e.result == 'skipped')
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#dev-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            ‚úÖ CI/CD Pipeline Passed!
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            All checks passed successfully! üéâ
