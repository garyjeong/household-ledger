name: Deploy to Production

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:  # ÏàòÎèô Ìä∏Î¶¨Í±∞ ÌóàÏö©
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20.x'

jobs:
  # Î∞∞Ìè¨ Ï†Ñ ÏôÑÏ†ÑÌïú ÌíàÏßà Í≤ÄÏ¶ù
  pre-deploy-verification:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      version: ${{ steps.version.outputs.version }}

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: household_ledger_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(node -p "require('./package.json').version")-${GITHUB_SHA::8}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Run full linting
        run: pnpm run lint

      - name: Run TypeScript check
        run: pnpm run type-check

      - name: Run Prettier check
        run: pnpm exec prettier --check .

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/household_ledger_test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-jwt-secret-key-for-ci" >> $GITHUB_ENV
          echo "JWT_REFRESH_SECRET=test-refresh-secret-key-for-ci" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-nextauth-secret" >> $GITHUB_ENV

      - name: Generate Prisma client
        run: pnpm exec prisma generate

      - name: Run database migrations
        run: pnpm exec prisma db push

      - name: Run full test suite with coverage
        run: pnpm run test:coverage:ci

      - name: Check coverage threshold
        run: pnpm run test:coverage:threshold

      - name: Build application
        run: pnpm run build

      - name: Create Sentry release
        if: env.SENTRY_ORG && env.SENTRY_PROJECT && env.SENTRY_AUTH_TOKEN
        env:
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          # Sentry CLIÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Î¶¥Î¶¨Ï¶à ÏÉùÏÑ±
          npx @sentry/cli releases new ${{ steps.version.outputs.version }}
          npx @sentry/cli releases set-commits ${{ steps.version.outputs.version }} --auto
          npx @sentry/cli releases finalize ${{ steps.version.outputs.version }}

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Run E2E tests
        run: pnpm run test:e2e

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Check deployment readiness
        id: check
        run: |
          echo "All verification checks passed!"
          echo "should-deploy=true" >> $GITHUB_OUTPUT

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ steps.version.outputs.version }}
          path: |
            .next/
            package.json
            pnpm-lock.yaml
          retention-days: 30

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ steps.version.outputs.version }}
          path: |
            coverage/
            playwright-report/
            test-results/
          retention-days: 30

  # Staging Î∞∞Ìè¨ (ÏÑ†ÌÉùÏ†Å)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: pre-deploy-verification
    if: |
      needs.pre-deploy-verification.outputs.should-deploy == 'true' &&
      (github.event.inputs.environment == 'staging' || 
       (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    environment:
      name: staging
      url: https://staging.household-ledger.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.pre-deploy-verification.outputs.version }}

      - name: Deploy to Staging (Vercel)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          alias-domains: staging.household-ledger.app

      - name: Run smoke tests on staging
        run: |
          # Staging ÌôòÍ≤ΩÏóê ÎåÄÌïú Í∞ÑÎã®Ìïú Ìó¨Ïä§Ï≤¥ÌÅ¨
          curl -f https://staging.household-ledger.app/api/health || exit 1
          echo "‚úÖ Staging deployment successful!"

  # Production Î∞∞Ìè¨
  deploy-production:
    runs-on: ubuntu-latest
    needs: [pre-deploy-verification, deploy-staging]
    if: |
      needs.pre-deploy-verification.outputs.should-deploy == 'true' &&
      (github.event.inputs.environment == 'production' || 
       startsWith(github.ref, 'refs/tags/v'))
    environment:
      name: production
      url: https://household-ledger.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.pre-deploy-verification.outputs.version }}

      - name: Deploy to Production (Vercel)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod'
          alias-domains: household-ledger.app

      - name: Run smoke tests on production
        run: |
          # Production ÌôòÍ≤ΩÏóê ÎåÄÌïú Í∞ÑÎã®Ìïú Ìó¨Ïä§Ï≤¥ÌÅ¨
          curl -f https://household-ledger.app/api/health || exit 1
          echo "‚úÖ Production deployment successful!"

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.pre-deploy-verification.outputs.version }}
          name: Release ${{ needs.pre-deploy-verification.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            coverage/lcov.info
            playwright-report/**

  # Î∞∞Ìè¨ Í≤∞Í≥º ÏïåÎ¶º
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [pre-deploy-verification, deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify deployment success
        if: |
          needs.deploy-production.result == 'success' ||
          needs.deploy-staging.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            üöÄ Deployment Successful!
            
            Repository: ${{ github.repository }}
            Version: ${{ needs.pre-deploy-verification.outputs.version }}
            Environment: ${{ needs.deploy-production.result == 'success' && 'Production' || 'Staging' }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            ${{ needs.deploy-production.result == 'success' && 'üåü Live at: https://household-ledger.app' || 'üß™ Staging: https://staging.household-ledger.app' }}

      - name: Notify deployment failure
        if: |
          needs.pre-deploy-verification.result == 'failure' ||
          needs.deploy-staging.result == 'failure' ||
          needs.deploy-production.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            üö® Deployment Failed!
            
            Repository: ${{ github.repository }}
            Version: ${{ needs.pre-deploy-verification.outputs.version }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Failed Steps:
            ${{ needs.pre-deploy-verification.result == 'failure' && '‚ùå Pre-deployment verification' || '' }}
            ${{ needs.deploy-staging.result == 'failure' && '‚ùå Staging deployment' || '' }}
            ${{ needs.deploy-production.result == 'failure' && '‚ùå Production deployment' || '' }}
            
            Please check the GitHub Actions logs for details.
