// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =============================================
// User Management Models
// =============================================

model User {
  id           BigInt   @id @default(autoincrement())
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  nickname     String   @db.VarChar(60)
  avatarUrl    String?  @map("avatar_url") @db.VarChar(500)
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  ownedGroups     Group[]         @relation("GroupOwner")
  groupMembers    GroupMember[]
  groupInvites    GroupInvite[]   @relation("GroupInviteCreator")
  transactions    Transaction[]   @relation("TransactionOwner")
  auditLogs       AuditLog[]
  settings        UserSettings?
  pushTokens      PushToken[]     @relation("UserPushTokens")

  @@map("users")
}

model UserSettings {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @unique @map("user_id")
  settings  Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model PushToken {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @map("user_id")
  token     String   @db.VarChar(500)
  endpoint  String?  @db.VarChar(500)
  keys      Json?    // p256dh, auth keys for VAPID
  userAgent String?  @map("user_agent") @db.VarChar(500)
  isActive  Boolean  @default(true) @map("is_active")
  lastUsed  DateTime @default(now()) @map("last_used")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation("UserPushTokens", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token], map: "ux_user_token")
  @@index([userId, isActive], map: "idx_push_tokens_user_active")
  @@map("push_tokens")
}

model Group {
  id        BigInt   @id @default(autoincrement())
  name      String   @db.VarChar(120)
  ownerId   BigInt   @map("owner_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  owner        User          @relation("GroupOwner", fields: [ownerId], references: [id])
  members      GroupMember[]
  invites      GroupInvite[]
  transactions Transaction[]

  @@map("groups")
}

model GroupMember {
  groupId  BigInt                @map("group_id")
  userId   BigInt                @map("user_id")
  role     GroupMemberRole       @default(MEMBER)
  joinedAt DateTime              @default(now()) @map("joined_at")

  // Relations
  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@id([groupId, userId])
  @@map("group_members")
}

model GroupInvite {
  id        BigInt   @id @default(autoincrement())
  groupId   BigInt   @map("group_id")
  code      String   @unique @db.VarChar(10)
  createdBy BigInt   @map("created_by")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator User  @relation("GroupInviteCreator", fields: [createdBy], references: [id])

  @@index([groupId], map: "idx_group_invites_group")
  @@index([expiresAt], map: "idx_group_invites_expires")
  @@map("group_invites")
}

enum GroupMemberRole {
  OWNER
  ADMIN
  MEMBER
}

// =============================================
// Financial Models
// =============================================

model Account {
  id        BigInt      @id @default(autoincrement())
  ownerType OwnerType   @map("owner_type")
  ownerId   BigInt      @map("owner_id")
  name      String      @db.VarChar(120)
  type      AccountType
  currency  String      @default("KRW") @db.Char(3)
  balance   BigInt      @default(0)
  isActive  Boolean     @default(true) @map("is_active")

  // Relations
  transactions Transaction[]

  @@index([ownerType, ownerId], map: "idx_accounts_owner")
  @@map("accounts")
}

enum AccountType {
  CASH
  CARD
  BANK
  OTHER
}

model Category {
  id        BigInt           @id @default(autoincrement())
  ownerType OwnerType        @map("owner_type")
  ownerId   BigInt           @map("owner_id")
  name      String           @db.VarChar(120)
  type      TransactionType
  color     String?          @db.VarChar(7)
  isDefault Boolean          @default(false) @map("is_default")

  // Relations
  transactions     Transaction[]

  @@unique([ownerType, ownerId, name, type], map: "ux_category_name")
  @@index([ownerType, ownerId], map: "idx_categories_owner")
  @@map("categories")
}

model Tag {
  id        BigInt    @id @default(autoincrement())
  ownerType OwnerType @map("owner_type")
  ownerId   BigInt    @map("owner_id")
  name      String    @db.VarChar(60)

  // Relations
  transactions TransactionTag[]

  @@unique([ownerType, ownerId, name], map: "ux_tag")
  @@map("tags")
}

enum OwnerType {
  USER
  GROUP
}

// =============================================
// Transaction Models
// =============================================

model Transaction {
  id          BigInt           @id @default(autoincrement())
  groupId     BigInt?          @map("group_id")
  ownerUserId BigInt           @map("owner_user_id")
  type        TransactionType
  date        DateTime         @db.Date
  amount      BigInt
  accountId   BigInt           @map("account_id")
  categoryId  BigInt?          @map("category_id")
  merchant    String?          @db.VarChar(160)
  memo        String?          @db.VarChar(1000)
  isSettled   Boolean          @default(false) @map("is_settled")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  // Relations
  group        Group?                       @relation(fields: [groupId], references: [id])
  owner        User                         @relation("TransactionOwner", fields: [ownerUserId], references: [id])
  account      Account                      @relation(fields: [accountId], references: [id])
  category     Category?                    @relation(fields: [categoryId], references: [id])
  tags         TransactionTag[]
  attachments  Attachment[]

  @@index([groupId, date], map: "idx_tx_group_date")
  @@index([ownerUserId, date], map: "idx_tx_owner_date")
  @@map("transactions")
}



model TransactionTag {
  transactionId BigInt @map("transaction_id")
  tagId         BigInt @map("tag_id")

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  tag         Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([transactionId, tagId])
  @@map("transaction_tags")
}

model Attachment {
  id            BigInt @id @default(autoincrement())
  transactionId BigInt @map("transaction_id")
  fileUrl       String @map("file_url") @db.VarChar(500)
  mime          String? @db.VarChar(100)
  size          Int?

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

enum TransactionType {
  EXPENSE
  INCOME
  TRANSFER
}







// =============================================
// Audit Log Model
// =============================================

model AuditLog {
  id          BigInt   @id @default(autoincrement())
  actorUserId BigInt   @map("actor_user_id")
  entity      String   @db.VarChar(50)
  entityId    BigInt   @map("entity_id")
  action      String   @db.VarChar(50)
  payloadJson String?  @map("payload_json") @db.Text
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  actor User @relation(fields: [actorUserId], references: [id])

  @@map("audit_logs")
}
