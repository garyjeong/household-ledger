// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =============================================
// User Management Models
// =============================================

/// 사용자 기본 정보 및 계정 관리
/// - 이메일/비밀번호 기반 인증
/// - 사용자 프로필 및 설정 정보 저장 (JSON)
/// - 그룹 멤버십 직접 연결 (groupId 외래키)
model User {
  id           BigInt   @id @default(autoincrement())
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  nickname     String   @db.VarChar(60)
  avatarUrl    String?  @map("avatar_url") @db.VarChar(500)
  groupId      BigInt?  @map("group_id")
  settings     Json? // 사용자 설정을 JSON으로 저장 (테마, 언어, 통화 등)
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  ownedGroups    Group[]         @relation("GroupOwner")
  group          Group?          @relation("GroupMembers", fields: [groupId], references: [id])
  groupInvites   GroupInvite[]   @relation("GroupInviteCreator")
  transactions   Transaction[]   @relation("TransactionOwner")
  categories     Category[]      @relation("CategoryCreator")
  tags           Tag[]           @relation("TagCreator")
  recurringRules RecurringRule[] @relation("RecurringRuleCreator")

  @@index([groupId], map: "idx_users_group")
  @@map("users")
}

/// 가족/커플 그룹 관리
/// - 공동 가계부를 위한 그룹 생성
/// - 그룹 소유자와 멤버 관계 관리
/// - 거래 공유의 기본 단위
model Group {
  id        BigInt   @id @default(autoincrement())
  name      String   @db.VarChar(120)
  ownerId   BigInt   @map("owner_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  owner          User            @relation("GroupOwner", fields: [ownerId], references: [id])
  members        User[]          @relation("GroupMembers")
  invites        GroupInvite[]
  transactions   Transaction[]
  categories     Category[]
  tags           Tag[]
  recurringRules RecurringRule[]

  @@map("groups")
}

/// 그룹 초대 코드 관리
/// - 10자리 영문+숫자 초대 코드 생성
/// - 24시간 만료 시간 설정
/// - 안전한 그룹 참여를 위한 일회성 코드
model GroupInvite {
  id        BigInt   @id @default(autoincrement())
  groupId   BigInt   @map("group_id")
  code      String   @unique @db.VarChar(10)
  createdBy BigInt   @map("created_by")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator User  @relation("GroupInviteCreator", fields: [createdBy], references: [id])

  @@index([groupId], map: "idx_group_invites_group")
  @@index([expiresAt], map: "idx_group_invites_expires")
  @@map("group_invites")
}

// =============================================
// Financial Models
// =============================================

/// 거래 분류 카테고리 관리
/// - 수입/지출별 거래 분류 체계
/// - 기본 카테고리 + 그룹별 사용자 정의 카테고리
/// - 통계 분석 및 예산 관리의 기본 단위
/// - 예산 금액 직접 저장 (budgetAmount)
model Category {
  id           BigInt          @id @default(autoincrement())
  groupId      BigInt?         @map("group_id")    // 그룹 ID (기본 카테고리는 null)
  createdBy    BigInt          @map("created_by")  // 생성자 ID
  name         String          @db.VarChar(120)
  type         TransactionType
  color        String?         @db.VarChar(7)
  isDefault    Boolean         @default(false) @map("is_default")
  budgetAmount BigInt?         @default(0) @map("budget_amount") // 카테고리별 예산 금액
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")

  // Relations
  group          Group?        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator        User          @relation("CategoryCreator", fields: [createdBy], references: [id])
  transactions   Transaction[]
  recurringRules RecurringRule[]

  @@unique([groupId, name, type], map: "ux_category_name")
  @@index([groupId], map: "idx_categories_group")
  // @@index([createdBy]) 제거 - 실제 쿼리에서 사용되지 않음
  @@map("categories")
}

/// 거래 태그 시스템
/// - 카테고리 외 추가적인 거래 분류
/// - 자유로운 태그 방식으로 유연한 분류
model Tag {
  id        BigInt    @id @default(autoincrement())
  groupId   BigInt?   @map("group_id")    // 그룹 ID (기본 태그는 null)
  createdBy BigInt    @map("created_by")  // 생성자 ID
  name      String    @db.VarChar(60)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  group        Group?        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator      User          @relation("TagCreator", fields: [createdBy], references: [id])
  transactions Transaction[]

  @@unique([groupId, name], map: "ux_tag")
  @@index([groupId], map: "idx_tags_group")
  @@map("tags")
}



// =============================================
// Transaction Models
// =============================================

/// 거래 내역 중심 테이블
/// - 수입/지출/이체 모든 거래 기록
/// - 개인/그룹 거래 구분
/// - 가계부의 핵심 데이터이자 통계 분석의 기본
/// - 태그 직접 연결 (tagId 외래키)
model Transaction {
  id          BigInt          @id @default(autoincrement())
  groupId     BigInt?         @map("group_id")
  ownerUserId BigInt          @map("owner_user_id")
  type        TransactionType
  date        DateTime        @db.Date
  amount      BigInt
  categoryId  BigInt?         @map("category_id")
  tagId       BigInt?         @map("tag_id") // 태그 직접 연결
  merchant    String?         @db.VarChar(160)
  memo        String?         @db.VarChar(1000)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  // Relations
  group       Group?       @relation(fields: [groupId], references: [id])
  owner       User         @relation("TransactionOwner", fields: [ownerUserId], references: [id])
  category    Category?    @relation(fields: [categoryId], references: [id])
  tag         Tag?         @relation(fields: [tagId], references: [id])
  attachments Attachment[]

  @@index([groupId, date], map: "idx_tx_group_date")
  @@index([ownerUserId, date], map: "idx_tx_owner_date") 
  @@index([categoryId], map: "idx_tx_category")
  // @@index([tagId]) 제거 - 현재 API에서 tagId 필터링 미사용
  @@map("transactions")
}

/// 거래 첨부파일 관리
/// - 영수증, 사진 등 거래 증빙 자료
/// - 파일 URL, MIME 타입, 크기 정보 저장
/// - 거래 검증 및 가계부 투명성 확보
model Attachment {
  id            BigInt  @id @default(autoincrement())
  transactionId BigInt  @map("transaction_id")
  fileUrl       String  @map("file_url") @db.VarChar(500)
  mime          String? @db.VarChar(100)
  size          Int?

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

enum TransactionType {
  EXPENSE
  INCOME
  TRANSFER
}

enum OwnerType {
  USER
  GROUP
}

// =============================================
// Budget Management Models
// =============================================

/// 월별 예산 관리 (단순화)
/// - 사용자/그룹별 월단위 총 예산 설정
/// - 세부 예산은 Category 테이블에서 관리
model Budget {
  id          BigInt       @id @default(autoincrement())
  ownerType   OwnerType    @map("owner_type")
  ownerId     BigInt       @map("owner_id")
  period      String       @db.VarChar(7) // YYYY-MM format
  totalAmount BigInt       @map("total_amount")
  status      BudgetStatus @default(ACTIVE)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@unique([ownerType, ownerId, period], map: "ux_budget_owner_period")
  @@index([ownerType, ownerId], map: "idx_budgets_owner")
  @@map("budgets")
}

enum BudgetStatus {
  ACTIVE
  CLOSED
  DRAFT
}

// =============================================
// Recurring Rules Model
// =============================================

/// 반복 거래 규칙 정의
/// - 월세, 구독료 등 정기 지출 자동화
/// - 매월/매주 등 반복 주기 및 날짜 규칙 설정
/// - 예상 잔액 계산 및 자동 거래 생성 기반
model RecurringRule {
  id         BigInt             @id @default(autoincrement())
  groupId    BigInt?            @map("group_id")    // 그룹 ID (개인 규칙은 null)
  createdBy  BigInt             @map("created_by")  // 생성자 ID
  startDate  DateTime           @map("start_date") @db.Date
  frequency  RecurringFrequency
  dayRule    String             @map("day_rule") @db.VarChar(20) // D1-D31 or MON,TUE,etc
  amount     BigInt
  categoryId BigInt?            @map("category_id")
  merchant   String?            @db.VarChar(160)
  memo       String?            @db.VarChar(1000)
  isActive   Boolean            @default(true) @map("is_active")
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @updatedAt @map("updated_at")

  // Relations
  group    Group?     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator  User       @relation("RecurringRuleCreator", fields: [createdBy], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])

  @@index([groupId, isActive], map: "idx_recurring_rules_group_active")
  // 사용 빈도가 낮은 인덱스들 제거로 성능 최적화
  // @@index([createdBy, isActive]) 제거
  // @@index([frequency, isActive]) 제거
  @@map("recurring_rules")
}

enum RecurringFrequency {
  MONTHLY
  WEEKLY
  DAILY
}
