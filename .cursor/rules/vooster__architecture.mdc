---
description:
globs:
alwaysApply: true
---
# Technical Requirements Document (TRD)

## 1. Executive Technical Summary
- **Project Overview**: 신혼부부를 위한 간단한 수동 입력 기반 가계부 웹 애플리케이션 개발. Next.js를 사용하여 빠르고 반응성이 뛰어난 사용자 경험을 제공하고, Supabase를 통해 데이터베이스 및 인증 기능을 관리한다.
- **Core Technology Stack**: Next.js 14, React, TypeScript, TailwindCSS, Supabase, PostgreSQL, Vercel, exchangerate.host, Playwright, Vitest, ESLint, Prettier
- **Key Technical Objectives**:
    - **Performance**: 첫 페이지 로딩 시간 2.5초 이내 달성 및 일 평균 입력 완료 시간 10초 이내 유지.
    - **Scalability**: 월간 활성 사용자(MAU) 1,000명 이상 지원.
    - **Reliability**: 높은 가족코드 초대 성공률(90% 이상) 및 안정적인 환율 정보 제공.
- **Critical Technical Assumptions**:
    - exchangerate.host API의 안정적인 제공.
    - Supabase의 안정적인 데이터베이스 및 인증 서비스 제공.
    - 사용자들이 수동 입력 방식을 선호한다는 가정.

## 2. Tech Stack

| Category          | Technology / Library        | Reasoning (Why it's chosen for this project) |
| ----------------- | --------------------------- | -------------------------------------------- |
| Framework         | Next.js 14                | 서버 사이드 렌더링(SSR) 및 정적 사이트 생성(SSG) 지원, 빠른 페이지 로딩 속도 및 SEO 최적화 |
| UI Library        | React                       | 컴포넌트 기반 개발, 재사용성 및 유지보수 용이성 |
| Language          | TypeScript                  | 정적 타입 검사, 코드 안정성 및 개발 생산성 향상 |
| Styling           | TailwindCSS                 | 유틸리티 우선 CSS 프레임워크, 빠른 스타일링 및 반응형 디자인 지원 |
| Backend / DB      | Supabase, PostgreSQL          | BaaS(Backend as a Service) 제공, 인증, 데이터베이스, 실시간 업데이트 기능 제공, PostgreSQL의 안정성 및 확장성 |
| Hosting           | Vercel                      | Next.js에 최적화된 서버리스 배포 플랫폼, 자동 스케일링 및 CDN 지원 |
| Currency API      | exchangerate.host          | 무료 환율 API 제공, 다중 통화 지원 기능 구현 |
| Testing (E2E)     | Playwright                  | End-to-End 테스트 자동화, 사용자 시나리오 기반 테스트 용이성 |
| Testing (Unit)    | Vitest                      | 빠른 Unit 테스트 실행, 코드 품질 확보 |
| Linting           | ESLint                      | 코드 스타일 규칙 적용, 코드 품질 및 일관성 유지 |
| Formatting        | Prettier                    | 자동 코드 포맷팅, 코드 스타일 일관성 유지 |

## 3. System Architecture Design

### Top-Level building blocks
- **Frontend (Next.js Application)**:
    - 사용자 인터페이스 및 사용자 상호 작용 처리.
    - React 컴포넌트 기반으로 구축.
    - TailwindCSS를 사용한 스타일링.
    - 기능 모듈:
        - 인증 (로그인, 회원가입)
        - 가계부 (수입/지출 입력, 편집, 삭제)
        - 통계 (월별, 카테고리별 통계)
        - 예산 (예산 설정, 초과 알림)
        - 설정 (사용자 설정, 가족 코드 관리)
- **Backend (Supabase)**:
    - 데이터베이스: PostgreSQL
    - 인증: 사용자 인증 및 권한 관리.
    - API: Frontend와 데이터 통신을 위한 API 제공.
    - 기능 모듈:
        - 사용자 관리
        - 가계부 데이터 관리
        - 통계 데이터 생성
        - 예산 관리
- **External API (exchangerate.host)**:
    - 실시간 환율 정보 제공.
    - 환율 정보를 캐싱하여 API 호출 제한 극복.

### Top-Level Component Interaction Diagram

```mermaid
graph TD
    A[Frontend (Next.js)] --> B[Backend (Supabase)]
    B --> C[PostgreSQL]
    A --> D[exchangerate.host API]
```

- Frontend (Next.js)는 사용자 인터페이스를 제공하고, 사용자 입력을 받아 Backend (Supabase)에 API 요청을 보낸다.
- Backend (Supabase)는 API 요청을 처리하고, 데이터베이스(PostgreSQL)에 데이터를 저장하거나 조회한다.
- Frontend (Next.js)는 환율 정보가 필요한 경우 exchangerate.host API에 직접 요청한다.
- exchangerate.host API는 실시간 환율 정보를 Frontend (Next.js)에 제공한다.

### Code Organization & Convention
**Domain-Driven Organization Strategy**
- **Domain Separation**: 사용자 관리, 가계부 관리, 통계 관리, 예산 관리 등으로 도메인 분리.
- **Layer-Based Architecture**: presentation (UI 컴포넌트), business logic (서비스), data access (Supabase API 호출) 레이어로 분리.
- **Feature-Based Modules**: 각 기능별로 모듈을 구성하여 코드 재사용성 및 유지보수성 향상.
- **Shared Components**: 공통 유틸리티, 타입, 재사용 가능한 컴포넌트를 별도 모듈로 관리.

**Universal File & Folder Structure**
```
/
├── components/          # 재사용 가능한 UI 컴포넌트
│   ├── button/
│   │   ├── Button.tsx
│   │   └── Button.module.css
│   ├── input/
│   │   ├── Input.tsx
│   │   └── Input.module.css
│   └── ...
├── pages/               # Next.js 페이지 컴포넌트 (라우팅)
│   ├── _app.tsx          # 전역 레이아웃 및 스타일 설정
│   ├── index.tsx         # 메인 페이지
│   ├── login.tsx         # 로그인 페이지
│   ├── register.tsx      # 회원가입 페이지
│   └── ...
├── services/            # 비즈니스 로직 및 API 호출
│   ├── auth.ts           # 인증 관련 서비스
│   ├── household.ts      # 가계부 관련 서비스
│   ├── statistics.ts     # 통계 관련 서비스
│   └── ...
├── utils/               # 공통 유틸리티 함수
│   ├── currency.ts       # 통화 관련 유틸리티
│   ├── date.ts           # 날짜 관련 유틸리티
│   └── ...
├── types/               # TypeScript 타입 정의
│   ├── household.ts      # 가계부 데이터 타입
│   ├── user.ts           # 사용자 데이터 타입
│   └── ...
├── public/              # 정적 파일 (이미지, 폰트 등)
├── styles/              # 전역 스타일 시트 (TailwindCSS 설정)
│   ├── global.css
│   └── tailwind.config.js
├── .eslintrc.js         # ESLint 설정 파일
├── .prettierrc.js       # Prettier 설정 파일
├── tsconfig.json        # TypeScript 설정 파일
└── package.json         # 프로젝트 의존성 및 스크립트 관리
```

### Data Flow & Communication Patterns
- **Client-Server Communication**: API request/response 패턴 (RESTful API)
- **Database Interaction**: Supabase 클라이언트 라이브러리 사용, PostgreSQL 데이터베이스에 직접 쿼리.
- **External Service Integration**: exchangerate.host API 호출, 환율 정보 캐싱.
- **Real-time Communication**: 필요시 Supabase의 실시간 데이터베이스 기능을 활용하여 데이터 동기화.
- **Data Synchronization**: 데이터 일관성을 위해 Supabase 트랜잭션 사용.

## 4. Performance & Optimization Strategy
- **Code Splitting**: Next.js의 Code Splitting 기능을 활용하여 초기 로딩 시간을 최소화.
- **Image Optimization**: 이미지 최적화 및 Lazy Loading 적용.
- **Caching**: 환율 정보 및 자주 사용되는 데이터 캐싱.
- **Database Optimization**: 데이터베이스 쿼리 최적화 및 인덱싱 적용.

## 5. Implementation Roadmap & Milestones
### Phase 1: Foundation (MVP Implementation)
- **Core Infrastructure**: Next.js 프로젝트 설정, Supabase 데이터베이스 및 인증 설정, TailwindCSS 설정.
- **Essential Features**: 회원가입 / 로그인, 가족코드 그룹 연동, 수입·지출 입력/편집/삭제, 카테고리 관리, 다중 통화 지원.
- **Basic Security**: bcrypt 해시, HTTPS 강제, 코드 기반 그룹 연결 시 24시간 만료.
- **Development Setup**: 개발 환경 구축, CI/CD 파이프라인 설정.
- **Timeline**: 3개월 (Q1)

### Phase 2: Feature Enhancement
- **Advanced Features**: 월별·카테고리별 통계/그래프, 예산 설정 & 초과 알림(Push, In-app), 반복 지출 자동 등록.
- **Performance Optimization**: 시스템 성능 개선 및 최적화.
- **Enhanced Security**: 보안 기능 강화 및 취약점 점검.
- **Monitoring Implementation**: 시스템 모니터링 및 로깅 설정.
- **Timeline**: 3개월 (Q2)

## 6. Risk Assessment & Mitigation Strategies
### Technical Risk Analysis
- **Technology Risks**: exchangerate.host API 다운 또는 변경, Supabase 서비스 장애.
    - **Mitigation Strategies**: 환율 정보 백업 API 구축, Supabase 장애 대비 데이터 백업 및 복구 전략 마련.
- **Performance Risks**: 데이터 증가에 따른 성능 저하, API 호출 제한.
    - **Mitigation Strategies**: 데이터베이스 쿼리 최적화, 캐싱 전략 강화, API 호출 제한 회피.
- **Security Risks**: 사용자 데이터 유출, 인증 우회.
    - **Mitigation Strategies**: 보안 취약점 점검 및 패치, 데이터 암호화, 강력한 인증 정책 적용.
- **Integration Risks**: 타사 API 연동 실패.
    - **Mitigation Strategies**: API 연동 테스트 강화, API 변경에 대한 빠른 대응 체계 구축.

### Project Delivery Risks
- **Timeline Risks**: 개발 일정 지연, 예상치 못한 기술적 문제 발생.
    - **Contingency Plans**: 일정 관리 및 우선순위 조정, 기술적 문제 해결을 위한 전문가 지원.
- **Resource Risks**: 개발 인력 부족, 핵심 개발자 이탈.
    - **Contingency Plans**: 추가 개발 인력 확보, 지식 공유 및 문서화 강화.
- **Quality Risks**: 코드 품질 저하, 버그 발생.
    - **Contingency Plans**: 코드 리뷰 강화, 테스트 자동화, 버그 추적 시스템 구축.
- **Deployment Risks**: 배포 실패, 환경 설정 문제.
    - **Contingency Plans**: 배포 자동화, 롤백 전략 마련, 환경 설정 문서화.

